#include <omp.h>

// dumb matrix multiply generated by COdium, writes to memory
void multiplymatrix(float a[], float b[], float c[], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            c[i * n + j] = 0.0;
            for (int k = 0; k < n; k++) {
                c[i * n + j] += a[i * n + k] * b[k * n + j];
            }
        }
    }
}


// inner dot product uses registers, still goes in
// non-sequential direction in memory
void multiplymatrix2(float a[], float b[], float c[], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            float dot = 0.0;
            for (int k = 0; k < n; k++) {
                dot += a[i * n + k] * b[k * n + j];
            }
            c[i * n + j] = dot;
        }
    }
}

// HW: make a better matrix multiply where second matrix is transposed


// multithreading with OpenMP
void multiplymatrix3(float a[], float b[], float c[], int n) {

    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            float dot = 0.0;
            for (int k = 0; k < n; k++) {
                dot += a[i * n + k] * b[k * n + j];
            }
            c[i * n + j] = dot;
        }
    }
}

// multithreading with OpenMP
void multiplymatrix3(float a[], float b[], float c[], int n) {

    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            float dot = 0.0;
            #pragma omp simd
            for (int k = 0; k < n; k++) {
                dot += a[i * n + k] * b[k * n + j];
            }
            c[i * n + j] = dot;
        }
    }
}


int main() {
    int num_threads = omp_get_num_procs();
    int n = 1024;
    float* a = new float[n*n];
    float* b = new float[n*n];
    float* c = new float[n*n];

    // set the matrices to random values
    for (int i = 0; i < n*n; i++) {
        a[i] = 1;
        b[i] = 1;
        c[i] = 0;
    }

    multiplymatrix(a, b, c, n);

    multiplymatrix2(a, b, c, n);

    multiplymatrix3(a, b, c, n);

    delete[] a;
    delete[] b;
    delete[] c;
    return 0;
}